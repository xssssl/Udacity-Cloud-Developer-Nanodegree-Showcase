service:
  name: Cloud-Developer-Showcase

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}

  tracing:
    lambda: true
    apiGateway: true

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"

  environment:
    APP_NAME: cloud-developer-nanodegree-showcase
    RESOLUTIONS_TABLE: Resolutions-${self:provider.stage}
    RESOLUTIONS_S3_BUCKET: ${self:provider.environment.APP_NAME}-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    LOCAL_DYNAMODB_PORT: 8000
    AUTH0_JWKS_URL: https://xssssl.au.auth0.com/.well-known/jwks.json
    AWS_X_RAY_ENABLE: true

custom:
  serverless-offline:
    httpPort: 3003

  dynamodb:
    start:
      port: ${self:provider.environment.LOCAL_DYNAMODB_PORT}
      inMemory: true
      migrate: true
      seed: true
    seed:
      resolutions:
        sources:
          - table: ${self:provider.environment.RESOLUTIONS_TABLE}
            sources: [./test/seed/ResolutionsTable.json]

  documentation:
    api:
      info:
        version: v1.0.0
        title: Resolutions-API
        description: Udacity Cloud Developer Nanodegree Showcase
    models:
      - name: CreateResolutionRequest
        contentType: application/json
        schema: ${file(src/requests/CreateResolutionRequest.json)}
      - name: UpdateResolutionRequest
        contentType: application/json
        schema: ${file(src/requests/UpdateResolutionRequest.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetResolutions:
    handler: src/lambda/http/getResolutions.handler
    events:
      - http:
          method: get
          path: items
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-GetResolutions-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESOLUTIONS_TABLE}

  CreateResolution:
    handler: src/lambda/http/createResolution.handler
    events:
      - http:
          method: post
          path: items
          cors: true
          authorizer: Auth
          documentation:
            summary: 'Create a new resolution idea'
            description: 'Create a new resolution idea'
            requestModels:
              'application/json': CreateResolutionRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-CreateResolution-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESOLUTIONS_TABLE}

  UpdateResolution:
    handler: src/lambda/http/updateResolution.handler
    events:
      - http:
          method: put
          path: items/{itemId}
          cors: true
          authorizer: Auth
          documentation:
            summary: 'Update a resolution idea'
            description: 'Update a resolution idea'
            requestModels:
              'application/json': UpdateResolutionRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-UpdateResolution-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESOLUTIONS_TABLE}

  DeleteResolution:
    handler: src/lambda/http/deleteResolution.handler
    events:
      - http:
          method: delete
          path: items/{itemId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-DeleteResolution-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESOLUTIONS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: items/{itemId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-GenerateUploadUrl-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.RESOLUTIONS_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESOLUTIONS_TABLE}

resources:
  Resources:
    ResolutionDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RESOLUTIONS_TABLE}

    RequestBodyValidator:
      Type: 'AWS::ApiGateway::RequestValidator'
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.RESOLUTIONS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.RESOLUTIONS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket